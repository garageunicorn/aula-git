### **Configuração Inicial do Git**  
1° **Comando**:  

git config --global user.name "garageunicorn"
  
**Explicação**:  
- Define o nome de usuário **global** do Git (usado em todos os seus repositórios).  
- Substitua `"garageunicorn"` pelo seu nome de usuário.  

---

2° **Comando**:  

git config --global user.email "professorvitorionetto@gmail.com"
  
**Explicação**:  
- Define o e-mail associado às suas ações no Git.  
- Use o mesmo e-mail cadastrado no GitHub/GitLab (se for o caso).  

---

3° **Comando**:  

git config --list
  
**Objetivo**:  
- Lista todas as configurações do Git para verificar se `user.name` e `user.email` estão corretos.

---

### **Criação do Repositório Local**  
4° **Comando**:  

mkdir aula-git
  
**Objetivo**:  
- Cria uma pasta chamada `aula-git` no diretório atual.  

---

6° **Comando**:  

cd .\aula-git\
  
**Explicação**:  
- Entra na pasta `aula-git` (Windows).  
- No Linux/macOS: `cd aula-git`.

---

7° **Comando**:  

git init
  
**Objetivo**:  
- Inicializa um repositório Git vazio na pasta `aula-git`.

---

### **Gerenciamento de Arquivos e Commits**  
**1° Passo**: Criar o arquivo `Readme.md` manualmente (via editor de texto).  

---

8° **Comando**:  

git status
  
**Explicação**:  
- Mostra o estado atual do repositório.  
- O `Readme.md` aparecerá como **untracked** (não monitorado pelo Git).  

---

9° **Comando**:  

git add Readme.md
  
**Objetivo**:  
- Adiciona o `Readme.md` à **staging area** (área de preparação para commit).  

---

10° **Comando**:  

git status
  
**Explicação**:  
- Agora o `Readme.md` aparece como **changes to be committed** (pronto para ser commitado).  

---

11° **Comando**:  

git commit -m "Criei o arquivo Readme.md"
  
**Objetivo**:  
- Cria o primeiro commit com o arquivo `Readme.md`.  
- A flag `-m` permite adicionar uma mensagem descritiva.  

---

12° **Comando**:  

git status
  
**Explicação**:  
- Mostra que não há alterações pendentes após o commit.  

---

### **Edições e Novos Commits**  
**2° Passo**: Editar o `Readme.md` (adicionar texto, salvar).  

---

13° **Comando**:  

git status
  
**Explicação**:  
- O `Readme.md` agora aparece como **modified** (modificado).  

---

14° **Comando**:  

git add Readme.md
  
**Objetivo**:  
- Prepara a nova versão do arquivo para commit.  

---

15° **Comando**:  

git status
  
**Explicação**:  
- Mostra o arquivo como **changes to be committed** novamente.  

---

16° **Comando**:  

git commit -m "edição 1 do arquivo Readme.md"
  
**Objetivo**:  
- Cria um segundo commit com as alterações feitas.  

---

17° **Comando**:  

git status
  
**Explicação**:  
- Confirma que não há alterações pendentes.  

---

### **Histórico e Detalhes de Commits**  
18° **Comando**:  

git log
  
**Objetivo**:  
- Exibe o histórico de commits com hashes, autores, datas e mensagens.  

---

19° **Comando**:  

git show 0eb52b5bdb9ccf37e2ac5f93042b4376d1f5524a
  
**Explicação**:  
- Mostra detalhes do commit específico (hash informado).  
- Substitua o hash pelo do seu primeiro commit (visto no `git log`).  

---

### **Comparando Alterações**  
**3° Passo**: Ver diferenças entre commits  
20° **Comando**:  

git diff 0eb52b5bdb9ccf37e2ac5f93042b4376d1f5524a HEAD
  
**Explicação**:  
- Compara o primeiro commit (hash) com a versão atual (`HEAD`).  
- Mostra linhas adicionadas (**+**) ou removidas (**-**).  

---

### **Desfazendo Alterações**  
**4° Passo**: Reset para um commit anterior  
21° **Comando**:  

git reset --hard 0eb52b5bdb9ccf37e2ac5f93042b4376d1f5524a
  
**Aviso**:  
- `--hard` **apaga permanentemente** todas as alterações não commitadas.  
- Use apenas se tiver certeza!  

---

22° **Comando**:  

git log
  
**Objetivo**:  
- Confirma que o histórico agora só tem o primeiro commit.  

---

### **Trabalhando com Repositório Remoto**  
**5° Passo**: Configurar Git Remoto (ex: GitHub)  

23° **Comando**:  

git remote add origin https://github.com/seu-usuario/aula-git.git
  
**Explicação**:  
- `origin` é um apelido para o repositório remoto.  
- Substitua a URL pela do seu repositório no GitHub/GitLab.  

---

24° **Comando**:  

git branch -M main
  
**Objetivo**:  
- Renomeia o branch padrão (geralmente `master`) para `main`.  
- Alinha com o padrão moderno do GitHub.  

---

25° **Comando**:  

git push -u origin main
  
**Explicação**:  
- Envia os commits locais para o repositório remoto.  
- `-u` vincula o branch local ao remoto (próximos pushes só precisam de `git push`).  

---

### **Recapitulação de Conceitos**  
| Comando/Ação            | Objetivo                                 |  
|-------------------------|------------------------------------------|  
| `git config`            | Configurar usuário e e-mail              |  
| `git init`              | Iniciar um repositório local             |  
| `git add`               | Preparar arquivos para commit            |  
| `git commit`            | Salvar alterações no histórico           |  
| `git log`/`git show`    | Inspecionar o histórico                  |  
| `git diff`              | Comparar versões de arquivos             |  
| `git reset --hard`      | **Desfazer** alterações (cuidado!)       |  
| `git remote`/`git push` | Trabalhar com repositórios remotos       |  

--- 

Quer Ajudar? é só adicionar mais comandos uteis aqui neste, lembre-se:
de explicar oque o comando faz e preencher atualizar a ##Recapitulação de Conceitos##.
S2 Obrigado!!!